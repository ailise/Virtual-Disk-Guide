<chapter xmlns="http://docbook.org/ns/docbook"
	 xmlns:xl="http://www.w3.org/1999/xlink"
	 xml:id="VDG-Concepts" version="5.0">

  <title>Disk Concepts</title>

  <section xml:id="VDG-Concepts-Introduction">
    <title>Introduction</title>

    <para>
      The best way to learn is by doing, so to learn the concepts of
      virtual disks we're going to create a 1GiB virtual disk from
      scratch. This information is applicable to the topic of disks in
      general, it's value is not limited to virtual disks.
    </para>

    <para>
      What makes virtual disks any different from actual hard drives?
      We'll examine this question by creating a virtual disk from
      scratch.
    </para>

    <para>
      What does your operating system think a disk drive is? I have a
      320 GB SATA drive in my computer which is represented in Linux
      as the file <systemitem class="resource">/dev/sda</systemitem>.
      Using <command>file</command>, <command>stat</command>
      and <command>fdisk</command> we'll see what Linux thinks the
      <systemitem class="resource">/dev/sda</systemitem> file is.
    </para>

    <para>
      Lets start out by looking at what a regular drive looks like to
      our operating system. Throughout this document the regular drive
      we'll be comparing our findings against will be a 320G SATA hard
      drive drive that Linux references as <systemitem
      class="resource">/dev/sda</systemitem>. The following example
      shows some basic information about the device.
    </para>

    <example xml:id="VDG-Concepts-Regular-Drive">
      <title>Regular Disk Drive</title>

      <!-- Make this into a screenco with callouts on what to look for -->
      <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ file /dev/sda
/dev/sda: block special
<tbielawa>@(fridge)[~/images]
$ stat /dev/sda
  File: `/dev/sda'
  Size: 0		Blocks: 0          IO Block: 4096   block special file
Device: 5h/5d		Inode: 5217        Links: 1     Device type: 8,0
Access: (0660/brw-rw----)  Uid: (    0/    root)   Gid: (    6/    disk)
Access: 2010-09-15 01:09:02.060722589 -0400
Modify: 2010-09-12 11:03:20.831372852 -0400
Change: 2010-09-12 11:03:26.226369247 -0400
<tbielawa>@(fridge)[~/images]
$ sudo fdisk -l /dev/sda

Disk /dev/sda: 320.1 GB, 320071851520 bytes
255 heads, 63 sectors/track, 38913 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x12031202

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1               1       25496   204796588+   7  HPFS/NTFS
/dev/sda2           25497       31870    51199155   83  Linux
/dev/sda3           31871       33086     9767520   82  Linux swap / Solaris
/dev/sda4           33087       38913    46805377+   5  Extended
/dev/sda5   *       33087       38913    46805346   83  Linux]]></screen>
    </example>

    <para>
      The term "block" is generally interchangeable with the term
      "sector". The only difference in their meaning is
      contextual. It's common usage to say block when referring to the
      data being referenced and to use sector when speaking about disk
      geometry. Officially the term "data block" was defined by
      <orgname>ANSI ASC X3</orgname> in ANSI X3.221-199xata "AT
      Attachment Interface for Disk Drives (ATA-1)" ยง3.1.3 as:
    </para>

    <variablelist>
      <varlistentry>
	<term>data block</term>
	<listitem>
	  <para>
	    This term describes a data transfer, and is typically a
	    single sector [...].
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <!-- Technical Committee T13 Homepage: http://www.t10.org/t13/ -->
    <!-- http://www.t10.org/t13/project/d0791r4c-ATA-1.pdf -->

    <para>
      Storage units need to be clearly defined. Luckily some very
      smart people already took care of that. The
      <orgname>International Electrotechnical Commission</orgname>
      defined binary prefixes for use in the fields of data processing
      and data transmission. Below are some applied to bytes. See
      <xref linkend="VDG-Appendix-Units"/> for the full prefix
      listing.
    </para>

    <screen>
    Abbrev.   Measurement                         Name
    1B      = 8 Bits                              The byte
    1KiB    = 1B * 2^10                           The kibibyte
    1MiB    = 1KiB * 2^10                         The mebibyte
    1GiB    = 1MiB * 2^10                         The gibibyte
            = 1B * 2^10 * 2^10 * 2^10
            = 1B * 2^30
            = 1B * 1073741824 (1,073,741,824)
    </screen>
    <!-- Citation: IEC 60027-2, Second edition, 2000-11, Letter symbols to be used in electrical technology - Part 2: Telecommunications and electronics -->
    <!-- IEC 60027-2 online: http://webstore.iec.ch/webstore/webstore.nsf/artnum/034558 -->

    <!-- Also adopted by the IEEE as: IEEE Std 1541-2002 http://ieeexplore.ieee.org/servlet/opac?punumber=5254929 -->

  </section>

  <!-- Begin "tutorial" subsection -->

  <section xml:id="VDG-Concepts-Creation">
    <title>Learning by doing (Creating a 1GiB virtual disk from scratch)</title>

    <section xml:id="VDG-Concepts-Background-On-dd">
      <title>Background on the <command>dd</command> command</title>

      <para>
	We'll use the <command>dd</command> command to create the file
	that represents our virtual disk. Other higher level tools
	like <command>qemu-img</command> exist to do similar things
	but using <command>dd</command> will give us a deeper insight
	into what's going on. <command>dd</command> will only be used
	in the introductory part of this document, later on we will
	use the <command>qemu-img</command> command almost
	exclusively.
      </para>

      <para>
	If we're creating a 1GiB disk that means the file needs to be
	exactly 2<superscript>30</superscript> bytes in size. By
	default <command>dd</command> operates in block sized
	chunks. This means that to create
	2<superscript>30</superscript> bytes it needs to push a
	calculable number of these chunks into our target disk
	file. This number is referred to as the
	<option>count</option>. To calculate the proper
	<option>count</option> setting we need only to divide the
	total number of bytes required by the size of a each block.
      </para>

      <equation xml:id="eq.count">
	<title>Calculating the Count</title>

	<mathphrase>
	  count = 2<superscript>30</superscript>
	  / 2 <superscript>9</superscript> =
	1073741824/512 = 2097152 (2,097,152)</mathphrase>
      </equation>

      <para>
	We need something to fill the file with that has a negligible
	value. On Unix systems the best thing to use is the output
	from <systemitem class="resource">/dev/zero</systemitem> (a
	special character device like a keyboard). We specify
	<systemitem class="resource">/dev/zero</systemitem> as our
	input file to <command>dd</command> by using the
	<option>if</option> option.
      </para>

      <note>
	<para>
	  <systemitem class="resource">/dev/zero</systemitem> doesn't
	  provide endless "0"s. It actually provides endless
	  <keycode>NUL</keycode> control
	  characters(<keycap>^@</keycap> in Caret Notation
	  <footnote><para><link
	  xl:href="http://en.wikipedia.org/wiki/Caret_notation">Caret
	  Notation</link> on Wikipedia</para></footnote>). The
	  <keycode>NUL</keycode> control character has the octal value
	  <keycode>000</keycode>. The actual ASCII zero character
	  <keycap>0</keycap> has the octal value
	  <keycode>060</keycode>.
	</para>
      </note>

      <para>
	<keycode>NUL</keycode> being a control character
	<footnote><para><link
	xl:href="http://en.wikipedia.org/wiki/Control_code">Control
	Characters</link> on Wikipedia</para></footnote> means it's a
	non-printing character (it doesn't represent a written
	symbol), so if you want to identify it you can use
	<command>cat</command> like this to print 5
	<keycode>NUL</keycode> characters in Caret Notation:
      </para>

      <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ dd if=/dev/zero bs=1 count=5 2>/dev/null | cat -v
^@^@^@^@^@]]>
      </screen>

      <para>
	You can also convert the output from <systemitem
	class="resource">/dev/zero</systemitem> into ASCII
	<keycap>0</keycap> characters like this:
      </para>

      <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ if=/dev/zero bs=1 count=5 2>/dev/null | tr "\0" "\60"
00000]]>
      </screen>
    </section>

    <section xml:id="VDG-Concepts-Running-dd">
      <title>Running <command>dd</command></title>

      <para>
	With the information from the preceding sections we can now
	create the file that will soon be a virtual disk. The file
	we create will be called <filename>disk1.raw</filename> and
	filled with 2097152 blocks of <keycode>NUL</keycode>
	characters from <systemitem
	class="resource">/dev/null</systemitem>. Here's the command:
      </para>

      <example xml:id="VDG-Concepts-Example-Using-dd">
	<title>Running the <command>dd</command> command</title>

	<screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ dd if=/dev/zero of=disk1.raw bs=512 count=2097152]]>
	</screen>
      </example>

      <para>
	Now that you know what <systemitem
	class="resource">/dev/zero</systemitem> is it's obvious this
	is just a file containing 2<superscript>30</superscript>
	bytes (1GiB) of data. Each byte literally having the value
	'0'.
      </para>
    </section>

    <section xml:id="CDG-Concepts-Examine-Created">
      <title>Examining the created file</title>

      <para>
	Like in <xref linkend="VDG-Concepts-Regular-Drive"/> lets
	take a look at the file we created from the operating
	systems point of view.
      </para>

      <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ dd if=/dev/zero of=disk1.raw bs=512 count=2097152
2097152+0 records in
2097152+0 records out
1073741824 bytes (1.1 GB) copied, 10.8062 s, 99.4 MB/s
<tbielawa>@(fridge)[~/images]
$ file disk1.raw
disk1.raw: data
<tbielawa>@(fridge)[~/images]
$ stat disk1.raw
  File: `disk1.raw'
  Size: 1073741824	Blocks: 2097152    IO Block: 4096   regular file
Device: 805h/2053d	Inode: 151552      Links: 1
Access: (0644/-rw-r--r--)  Uid: (  500/tbielawa)   Gid: (  500/tbielawa)
Access: 2010-09-15 02:51:36.147724384 -0400
Modify: 2010-09-15 02:51:25.729720057 -0400
Change: 2010-09-15 02:51:25.729720057 -0400
<tbielawa>@(fridge)[~/images]
$ fdisk -l disk1.raw

Disk disk1.raw: 0 MB, 0 bytes
255 heads, 63 sectors/track, 0 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x00000000

Disk disk1.raw doesn't contain a valid partition table]]>
      </screen>

      <para>
	From this there isn't much <filename>disk1.raw</filename>
	has in common with the actual disk drive <systemitem
	class="resource">sda</systemitem>.
      </para>

      <itemizedlist mark='opencircle'>
	<listitem>
	  <para>
	    <command>file</command> thinks it's "data", which the
	    <command>file</command> manual page says is how it labels
	    what are usually โbinaryโ or non-printable files.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <command>stat</command> says it's just a regular file.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <command>fdisk</command> doesn't knows how big it is, nor
	    can it find any partition information on it.
	  </para>
	</listitem>
      </itemizedlist>

      <table xml:id="VDG-Concepts-Comparison1" border="1">
	<caption>Attribute Comparison</caption>
	<tr>
	  <td>Command</td>
	  <td><systemitem class="resource">sda</systemitem></td>
	  <td><filename>disk1.raw</filename></td>
	</tr>
	<tr>
	  <td><command>file</command></td>
	  <td>block special</td>
	  <td>data</td>
	</tr>
	<tr>
	  <td><command>stat</command></td>
	  <td>block special</td>
	  <td>regular file</td>
	</tr>
	<tr>
	  <td><command>fdisk</command></td>
	  <td>Contains partition table</td>
	  <td>Missing partition table</td>
	</tr>
      </table>


      <screen><![CDATA[

          |     sda       |     disk1.raw     |
          -------------------------------------
    file  | block special |   data            |
    stat  | block special |   regular file    |
    fdisk | Has partition |   no partition    |
          |  table        |    table          |
          -------------------------------------]]>
      </screen>
      <para>
	These results make perfect
	sense. <filename>disk1.raw</filename> is just
	2<superscript>30</superscript> 0's in a row
      </para>
    </section>

    <section xml:id="VDG-Concepts-Create-Partition-Table">
      <title>Create a Partition Table</title>

      <para>
	Use GNU <command>parted</command> to put a valid partition
	table on the image file.
      </para>

      <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ parted disk1.raw mklabel msdos
WARNING: You are not superuser.  Watch out for permissions.]]></screen>

      <para>
	Lets examine the image again to see how the operating system
	thinks it has changed.
      </para>

      <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ file disk1.raw
disk1.raw: x86 boot sector, code offset 0xb8
<tbielawa>@(fridge)[~/images]
$ stat disk1.raw
  File: `disk1.raw'
  Size: 1073741824      Blocks: 2097160    IO Block: 4096   regular file
Device: 805h/2053d      Inode: 151552      Links: 1
Access: (0644/-rw-r--r--)  Uid: (  500/tbielawa)   Gid: (  500/tbielawa)
Access: 2010-09-15 19:38:30.516826093 -0400
Modify: 2010-09-15 19:38:25.934611550 -0400
Change: 2010-09-15 19:38:25.934611550 -0400
<tbielawa>@(fridge)[~/images]
$ fdisk -l disk1.raw
You must set cylinders.
You can do this from the extra functions menu.

Disk disk1.raw: 0 MB, 0 bytes
255 heads, 63 sectors/track, 0 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x000e44e8

    Device Boot      Start         End      Blocks   Id  System]]></screen>

    </section>

    <section xml:id="VDG-Concepts-Changed-After-Parted">
      <title>What <command>parted</command> changed</title>

      <itemizedlist>
	<listitem>
	  <para>
	    Now when we run <command>file</command> instead of "data"
	    <command>file</command> thinks it is an x86 boot
	    sector. That sounds pretty accurate since we just put a
	    partition table on it.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <command>stat</command> still thinks it's a regular file
	    (as opposed to a block special device, or a socket,
	    etc...).
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <command>fdisk</command> was able to find a partition
	    table in that boot sector that <command>file</command>
	    found.
	  </para>
	</listitem>
      </itemizedlist>

      <screen>
	<![CDATA[
          |     sda       |     disk1.raw     | disk1.raw (parted) |
          ----------------------------------------------------------
    file  | block special |   data            |   x86 boot sector  |
    stat  | block special |   regular file    |   regular file     |
    fdisk | Has partition |   no partition    |   valid partition  |
          |  table        |    table          |    table. Unknown  |
          -----------------------------------------cylinder count--|]]>
      </screen>
    </section>

    <section xml:id="VDG-Concepts-Creating-Partitions">
      <title>Creating Partitions</title>

      <para>
	After using <command>parted</command>
	<filename>disk1.raw</filename> has a partition table, but does
	that mean we can create partitions on it now? Lets run
	<command>fdisk</command> on <filename>disk1.raw</filename>.
      </para>

      <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ fdisk disk1.raw
You must set cylinders.
You can do this from the extra functions menu.

Command (m for help):]]>
      </screen>

      <para>
	To calculate how many cylinders to specify you could work
	backwards from <xref
	linkend="VDG-Concepts-Capacity-Equation"/><footnote><para><link
	xl:href="http://www.rwc.uc.edu/koehler/comath/42.html">Disk
	Geometry</link></para></footnote> but the number of unknowns
	at this time make it prohibitively difficult for us to work
	out. It's provided in this documentation as a general
	informative reference.
      </para>

      <equation xml:id="VDG-Concepts-Capacity-Equation">
	<title>Total Capacity of a Disk</title>

	<mathphrase>
	  Disk Capacity = (cylinders/disk) * (heads/cylinder) *
	  (tracks/head) * (sectors/track) * (bytes/sector)
	</mathphrase>
      </equation>

      <para>
	A much simpler way to create partitions (still using
	<command>fdisk</command>) is by is by accessing the file as if
	it were an actual device. Doing this requires creating loop
	devices.
      </para>

      <section xml:id="VDG-Concepts-Creating-Partitions-On-loop-devices">
	<title>Creating partitions on a loop device.</title>

	<para>
	  Instead of using <command>fdisk</command> on
	  <filename>disk1.raw</filename> directly, we'll create a loop
	  device and associate <filename>disk1.raw</filename> with
	  it. From here on we'll be accessing our virtual drives
	  through loop devices.
	</para>

	<para>
	  Why are we doing this? And what is a loop device?
	</para>

	<para>
	  Unfortunately for <filename>disk1.raw</filename>, it will
	  never be anything more than just a file. The operating just
	  system doesn't have interfaces for block operations against
	  files. As the kernel creates the block special device
	  <systemitem class="resource">/dev/sda</systemitem> to
	  represent my hard drive, we need to create a block special
	  device to represent our virtual disk. This is called a loop
	  device<footnote><para> Don't confuse the often misused term
	  "loopback device" with a "loop device." In networking a
	  loopback device refers to a virtual interface used for
	  routing within a host. <systemitem
	  class="domainname">localhost</systemitem> is the standard
	  hostname given to the loopback address <systemitem
	  class="ipaddress">172.0.0.1</systemitem>. See <link
	  xl:href="http://tools.ietf.org/html/rfc1700">rfc1700</link>
	  for additional information.</para></footnote> You can think of a loop device,
	  e.g., <systemitem class="resource">/dev/loop1</systemitem>,
	  like a translator.
	</para>

	<para>
	  With a loop device inserted between programs and our disk
	  image we can view and operate on the disk image as if it
	  were a regular drive. When accessed through a loop device
	  <command>fdisk</command> can properly determine the number
	  of cylinders, heads, and everything else required to create
	  partitions.
	</para>
      </section>

      <section xml:id="VDG-Concepts-Create-Loop-Device">
	<title>Creating a loop device</title>

	<note>
	  <para>
	    Since we'll be working with the kernel to create a device
	    you'll need to have super user permissions to
	    continue<footnote><para><package>FUSE</package>
	    (Filesystem in Userspace) has a module called <systemitem
	    class="filesystem">Mountlo</systemitem> that allows
	    non-root users to make make loop
	    devices.</para></footnote>.
	  </para>
	</note>

	<para>
	  To create a loop device. Run the
	  <command>losetup</command> command with the
	  <option>-f</option> option and an available loop device will
	  be selected automatically and associated with
	  <filename>disk1.raw</filename>.
	</para>

	<example xml:id="VDG-Concepts-Example-Run-losetup">
	  <title>Creating a loop device</title>

	  <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ sudo losetup -f disk1.raw
<tbielawa>@(fridge)[~/images]
$ sudo losetup -a
/dev/loop1: [0805]:151552 (/home/tbielawa/images/disk1.raw)]]>
	  </screen>
	</example>

	<para>
	  You can run <command>file</command>,
	  <command>stat</command>, and <command>fdisk</command> on
	  <filename>disk1.raw</filename> to verify that nothing has
	  changed since we put a partition table on it with
	  <command>parted</command>.
	</para>
      </section>

      <section xml:id="VDG-Concepts-Examine-Loop-Device">
	<title>Examine the loop device</title>

	<screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ file /dev/loop0
/dev/loop0: block special
<tbielawa>@(fridge)[~/images]
$ stat /dev/loop0
  File: `/dev/loop0'
  Size: 0               Blocks: 0          IO Block: 4096   block special file
Device: 5h/5d   Inode: 5102        Links: 1     Device type: 7,0
Access: (0660/brw-rw----)  Uid: (    0/    root)   Gid: (    6/    disk)
Access: 2010-09-15 01:22:09.909721760 -0400
Modify: 2010-09-12 11:03:19.351004598 -0400
Change: 2010-09-12 11:03:24.694640781 -0400
<tbielawa>@(fridge)[~/images]
$ sudo fdisk -l /dev/loop0
 Disk /dev/loop0: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x000e44e8

      Device Boot      Start         End      Blocks   Id  System]]>
	</screen>

	<para>
	  Look back at <xref linkend="VDG-Concepts-Regular-Drive"/>
	  where I ran these commands against my actual disk drive
	  (<systemitem class="resource">/dev/sda</systemitem>) and
	  you'll see the results are quite similar.
	</para>

	<itemizedlist>
	  <listitem>
	    <para>
	      <command>file</command> detects <systemitem
	      class="resource">loop0</systemitem> as a block special
	      device.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <command>stat</command> does too.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <command>fdisk</command> no longer says we need to set
	      the cylinders.
	    </para>
	  </listitem>
	</itemizedlist>

	<screen><![CDATA[
      |     sda       |     disk1.raw     | disk1.raw (parted) |     /dev/loop0       |
      ---------------------------------------------------------------------------------
      file  | block special |   data            |   x86 boot sector  | block special        |
      stat  | block special |   regular file    |   regular file     | block special        |
      fdisk | Has partition |   no partition    |   valid partition  | Has partition table, |
      |  table        |    table          |    table. Unknown  |  cylinder count      |
      -----------------------------------------cylinder count--|--known----------------]]>
	</screen>

	<para>
	  Our virtual disk is starting to look like a real hard drive
	  now!
	</para>

	<para>
	  To bring this section to a conclusion we'll create a
	  partition, format it with ext3, and then mount it for reading
	  and writing.
	</para>


      </section>

      <section xml:id="VDG-Concepts-Create-Partition">
	<title>Creating partitions</title>

	<para>
	  Open <systemitem class="resource">/dev/loop0</systemitem> (or
	  whatever loop device your disk was associated with) in
	  <command>fdisk</command> to create a partition.
	</para>

	<example xml:id="VDG-Concepts-Example-Create-Partition">
	  <title>Creating a partition with <command>fdisk</command></title>

	  <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ sudo fdisk /dev/loop0

Command (m for help): n
Command action
   e   extended
   p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-130, default 1):
Using default value 1
Last cylinder, +cylinders or +size{K,M,G} (1-130, default 130):
Using default value 130

Command (m for help): t
Selected partition 1
Hex code (type L to list codes): 83

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.

WARNING: Re-reading the partition table failed with error 22: Invalid argument.
The kernel still uses the old table. The new table will be used at
the next reboot or after you run partprobe(8) or kpartx(8)
Syncing disks.
<tbielawa>@(fridge)[~/images]
$ sudo fdisk -l /dev/loop0

Disk /dev/loop0: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x000e44e8

      Device Boot      Start         End      Blocks   Id  System
/dev/loop0p1               1         130     1044193+  83  Linux]]>
	  </screen>
	</example>
	<!-- That example would benefit a LOT from some well placed callouts -->
      </section>

      <section xml:id="VDG-Concepts-Formatting-Partitions">
	<title>Formatting Partitions</title>


	<para>
	  Unlike <systemitem class="resource">/dev/sda</systemitem> we
	  can't just create a partition on the first <systemitem
	  class="resource">loop0</systemitem> partition by addressing
	  it as <systemitem
	  class="resource">/dev/loop0</systemitem>. This is because
	  the kernel has no device created to represent this. Instead
	  we'll have to create another device associated with a
	  specific offset in our device/file.
	</para>

	<para>
	  Why do we have to specify an offset? How do we know what
	  offset to specifically?
	</para>

	<para>
	  An "offset" just means how far from the beginning of a
	  device something is. We need to know this because we're
	  going to create a device mapped to the first partition
	  (Linux does this automatically for regular disks during the
	  boot process). Partitions don't start on the first block of
	  a device because filesystem information is stored there. To
	  specify the offset we just need to know what sector the
	  partition (<systemitem
	  class="resource">loop0p1</systemitem>) starts
	  on. <command>fdisk</command> can give us this
	  information. (Spoiler: 9 times out of 10 the offset for the
	  first partition will be 512 * 63 = 32256).
	</para>

	<para>
	  Print the partition table using <command>fdisk</command>
	  with the <option>-u</option> option to switch the printing
	  format to sectors instead of cylinders for units.
	</para>

	<screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ sudo fdisk -ul /dev/loop0

Disk /dev/loop0: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders, total 2097152 sectors
Units = sectors of 1 * 512 = 512 bytes
Disk identifier: 0x000e44e8

      Device Boot      Start         End      Blocks   Id  System
/dev/loop0p1              63     2088449     1044193+  83  Linux]]>
	</screen>

	<para>
	  <systemitem class="resource">/dev/loop0p1</systemitem> is
	  our first partition and from the table above we know that it
	  starts on sector 63. Since we have to specify offsets in
	  bytes we multiply 63 by 512 (the default block size) to
	  obtain an offset of 32256 bytes.
	</para>

	<screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ sudo losetup -o 32256 -f /dev/loop0
<tbielawa>@(fridge)[~/images]
$ sudo losetup -a
/dev/loop0: [0805]:151552 (/home/tbielawa/images/disk1.raw)
/dev/loop1: [0005]:5102 (/dev/loop0), offset 32256]]>
	</screen>

	<para>
	  Now that we have <systemitem
	  class="resource">/dev/loop1</systemitem> representing
	  partition of our virtual disk we can create a filesystem on
	  it and finally mount it.
	</para>

	<example xml:id="VDG-Concepts-Example-Partition-Formating">
	  <title>Formatting the partition</title>

	  <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ sudo mkfs -t ext3 /dev/loop1
mke2fs 1.41.9 (22-Aug-2009)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
65536 inodes, 262136 blocks
13106 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376

Writing inode tables: done
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done

This filesystem will be automatically checked every 25 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.
<tbielawa>@(fridge)[~/images]
$ sudo losetup -d /dev/loop1
<tbielawa>@(fridge)[~/images]
$ sudo losetup -d /dev/loop0
<tbielawa>@(fridge)[~/images]
$ mkdir partition1
<tbielawa>@(fridge)[~/images]
$ sudo mount -t ext3 -o loop,offset=32256 disk1.raw partition1/
<tbielawa>@(fridge)[~/images]
$ mount | grep partition1
/dev/loop0 on /home/tbielawa/images/partition1 type ext3 (rw,offset=32256)
<tbielawa>@(fridge)[~/images]
$ df -h partition1/
Filesystem            Size  Used Avail Use% Mounted on
/dev/loop0           1008M   18M  940M   2% /home/tbielawa/images/partition1]]>
	  </screen>
	</example>

	<note>
	  <para>
	    The same procedure applies to any arbitrary partition:
	    obtain the starting sector, multiply by block size.
	  </para>
	</note>
      </section>

      <section xml:id="VDG-Concepts-Cleanup-Notes">
	<title>Cleaning Up</title>

	<para>
	  You can detach the loop device (while leaving your file
	  intact) by giving the <option>-d</option> option to
	  <command>losetup</command>.
	</para>

	<example xml:id="VDG-Concepts-Example-Detaching-a-loop-device">
	  <title>Detaching a loop device</title>

	  <screen><![CDATA[
<tbielawa>@(fridge)[~/images]
$ sudo losetup -d /dev/loop1]]>
	  </screen>
	</example>
      </section>
    </section>
  </section>
</chapter>
